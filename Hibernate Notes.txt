----------------- HIBERNATE -----------------
- is a high-performance Object/Relational persistence and query service
- Hibernate not only takes care of the mapping from Java classes to database tables (and from Java data types to SQL data types), but also provides data query and retrieval facilities
- relational databases, JDBC, and SQL is needed

- JDBC 	Java Database Connectivity.
- JTA 	Java Transaction API and 
- JNDI 	Java Naming and Directory Interface (JNDI)
- POJO	Plain Old Java Object (is an ordinary Java Object)

- These Java APIs enables Java programs to execute SQL statements and interact with any SQL compliant database.
- JDBC provides a flexible architecture to write a database independent application that can run on different platforms and interact with different DBMS without any modification.
- Hibernate(large applications????) is better than JDBC(small applications)

- five problems with normal db: }
		Granularity - sometimes an object model has more classes than the number of corresponding tables in the database.
		Inheritance - RDBMSs do not define anything similar to Inheritance (natural paradigm in OOP languages).
		Identity - 	An RDBMS defines exactly one notion of 'sameness': the primary key. 
					Java, however, defines both object identity (a==b) and object equality (a.equals(b)).
		Associations - 	OO languages represent associations using object references whereas 
						an RDBMS represents an association as a foreign key column.
		Navigation - The ways you access objects in Java and in RDBMS are fundamentally different.


- NOTE: Basically Hibernate allos to work the db as if they were objects. !!!!!!!!!!

- Object Relational Mapping (ORM) - is a programming technique for converting data between relational databases and object oriented programming languages such as Java, C#, etc.

- Advantages:
	1	Let’s business code access objects rather than DB tables.
	2	Hides details of SQL queries from OO logic.
	3	Based on JDBC 'under the hood.'
	4	No need to deal with the database implementation.
	5	Entities based on business concepts rather than database structure.
	6	Transaction management and automatic key generation.
	7	Fast development of application.

- Java ORM Frameworks:
	Enterprise JavaBeans Entity Beans
	Java Data Objects
	Castor
	TopLink
	Spring DAO
	Hibernate
	And many more

- ORM - It is a powerful, high performance Object-Relational Persistence and Query service for any Java Application.

- Hibernate maps Java classes to database tables and from Java data types to SQL data types and relieves the developer from 95% of common data persistence related programming tasks.

- Hibernate sits between traditional Java objects and database server to handle all the works in persisting those objects based on the appropriate O/R mechanisms and patterns.

- Hibernates Advantages:
	Hibernate takes care of mapping Java classes to database tables using XML files and without writing any line of code.
	Provides simple APIs for storing and retrieving Java objects directly to and from the database.
	If there is change in the database or in any table, then you need to change the XML file properties only.
	Abstracts away the unfamiliar SQL types and provides a way to work around familiar Java Objects.
	Hibernate does not require an application server to operate.
	Manipulates Complex associations of objects of your database.
	Minimizes database access with smart fetching strategies.
	Provides simple querying of data.

- Supported Databases
	HSQL Database Engine
	DB2/NT
	MySQL
	PostgreSQL
	FrontBase
	Oracle
	Microsoft SQL Server Database
	Sybase SQL Server
	Informix Dynamic Server
	
- Supported technologies
	XDoclet Spring
	J2EE
	Eclipse plug-ins
	Maven

- API's used by hibernate: 
	- JDBC  
	- JTA 
	- JNDI
	
- JDBC provides a rudimentary level of abstraction of functionality common to relational databases, allowing almost any database with a JDBC driver to be supported by Hibernate. 	
- JNDI and JTA allow Hibernate to be integrated with J2EE application servers.

------------------- Config ------------------------

- Configuration Object:
	The Configuration object provides two keys components −
		- Database Connection − This is handled through one or more configuration files supported by Hibernate. 
				These files are hibernate.properties and hibernate.cfg.xml.
		- Class Mapping Setup − This component creates the connection between the Java classes and database tables.

- SessionFactory Object - Configuration object is used to create a SessionFactory object which in turn configures Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated.
	
- Session Object - A Session is used to get a physical connection with a database. 	

- Transaction Object - A Transaction represents a unit of work with the database and most of the RDBMS supports transaction functionality. 

- Query Object - Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects.

- Criteria Object - Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.

---------------------- Install -----------------
Download hibernate from:	http://www.hibernate.org/downloads

- Once installed set CLASSPATH variable to the path of hibernate3.

NOTE: in one hand some pages mention for adding hibernate to classpath but in another hand just mention to add hibernate3.jar to the project lib folder. Review this section

---------------------- Config -------------------
- Hibernate requires to know in advance — where to find the mapping information that defines how your Java classes relate to the database tables.
	- hibernate.properties
		- hibernate.dialect - This property makes Hibernate generate the appropriate SQL for the chosen database.
		- hibernate.connection.driver_class - The JDBC driver class.
		- hibernate.connection.url - The JDBC URL to the database instance.
		- hibernate.connection.username - The database username.
		- hibernate.connection.password - The database password.
		- hibernate.connection.pool_size - Limits the number of connections waiting in the Hibernate database connection pool.
		- hibernate.connection.autocommit - Allows autocommit mode to be used for the JDBC connection.
	- hibernate.cfg.xml
- If you are using a database along with an application server and JNDI, then you would have to configure the following properties:
	- hibernate.connection.datasource - The JNDI name defined in the application server context, which you are using for the application.
	- hibernate.jndi.class - The InitialContext class for JNDI.
	- hibernate.jndi.<JNDIpropertyname> - Passes any JNDI property you like to the JNDI InitialContext.
	- hibernate.jndi.url - Provides the URL for JNDI.
	- hibernate.connection.username - The database username.
	- hibernate.connection.password - The database password.

----------- Hibernate Sessions	--------------

- A Session is used to get a physical connection with a database. 

- Instances may exist in one of the following three states at a given point in time:
	- transient − A new instance of a persistent class, which is not associated with a Session and has no representation in the database and no identifier value is considered transient by Hibernate.
	- persistent − You can make a transient instance persistent by associating it with a Session. A persistent instance has a representation in the database, an identifier value and is associated with a Session.
	- detached − Once we close the Hibernate Session, the persistent instance will become a detached instance.

- A Session instance is serializable if its persistent classes are serializable. 

----------- Persistence Class --------------

- The entire concept of Hibernate is to take the values from Java class attributes and persist them to a database table.
- A mapping document helps Hibernate in determining how to pull the values from the classes and map them with table and associated fields.
- Java classes whose objects or instances will be stored in database tables are called PERSISTENT CLASSES in Hibernate. Hibernate works best if these classes follow some simple rules, also known as the Plain Old Java Object (POJO) programming model.
-There are following main rules of persistent classes, however, none of these rules are hard requirements:
	- All Java classes that will be persisted need a default constructor.
	- All classes should contain an ID in order to allow easy identification of your objects within Hibernate and the database. This property maps to the primary key column of a database table.
	- All attributes that will be persisted should be declared private and have getXXX and setXXX methods defined in the JavaBean style.
	- A central feature of Hibernate, proxies, depends upon the persistent class being either non-final, or the implementation of an interface that declares all public methods.
	- All classes that do not extend or implement some specialized classes and interfaces required by the EJB framework.

--------------- Mapping files -------------
- An Object/relational mappings are usually defined in an XML document.
- Though many Hibernate users choose to write the XML by hand, but a number of tools exist to generate the mapping document. These include:
	- XDoclet
	- Middlegen
	- AndroMDA (for the advanced Hibernate users).
	
- The mapping document is a file with the format <classname>.hbm.xml.	
- Let us see understand a little detail about the mapping elements used in the mapping file:
	- The mapping document is an XML document having <hibernate-mapping> as the root element, which contains all the <class> elements.
	- The <class> elements are used to define specific mappings from a Java classes to the database tables. The Java class name is specified using the name attribute of the class element and the database table name is specified using the table attribute.
	- The <meta> element is optional element and can be used to create the class description.
	- The <id> element maps the unique ID attribute in class to the primary key of the database table. The NAME attribute of the id element refers to the property in the class and the COLUMN attribute refers to the column in the database table. The type attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.
	- The <generator> element within the id element is used to generate the primary key values automatically. The class attribute of the generator element is set to native to let hibernate pick up either identity, sequence, or hilo algorithm to create primary key depending upon the capabilities of the underlying database.
	- The <property> element is used to map a Java class property to a column in the database table. The name attribute of the element refers to the property in the class and the column attribute refers to the column in the database table. The type attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.
	
	<id> or <property>
		name 	-> property of class
		column 	-> database
		type	-> hibernate mapping type -> will convert from Java to SQL Data Type
	
---------------- Hibernate Mapping Types ----------------
- When you prepare a Hibernate mapping document, you find that you map the Java data types into RDBMS data types. The types declared and used in the mapping files are not Java data types; they are not SQL database types either. These types are called Hibernate mapping types, which can translate from Java to SQL data types and vice versa.

- Collection Mapping 
- If an entity or class has collection of values for a particular variable, then we can map those values using any one of the collection interfaces available in java. Hibernate can persist instances of java.util.Map, java.util.Set, java.util.SortedMap, java.util.SortedSet, java.util.List, and any array of persistent entities or values.

	1	Set 	   - This is mapped with a <set> element and initialized with HashSet
	2	SortedSet  - This is mapped with a <set> element and initialized with TreeSet. 
					 The sort attribute can be set to either a comparator or natural ordering.
	3	List 	   - This is mapped with a <list> element and initialized with ArrayList
	4	Collection - This is mapped with a <bag> or <ibag> element and initialized with .ArrayList
	5	Map 	   - This is mapped with a <map> element and initialized with HashMap
	6	SortedMap  - This is mapped with a <map> element and initialized with TreeMap. 
					 The sort attribute can be set to either a comparator or natural ordering.

- Association Mapping
	1	Many-to-One  - Mapping many-to-one relationship using Hibernate
	2	One-to-One   - Mapping one-to-one relationship using Hibernate
	3	One-to-Many  - Mapping one-to-many relationship using Hibernate
	4	Many-to-Many - Mapping many-to-many relationship using Hibernate

- Component Mappings
	1	Component Mappings	Mapping for a class having a reference to another class as a member variable.

---------------- Hibernate Annotations ----------------	
- Hibernate Annotations is the powerful way to provide the metadata for the Object and Relational Table mapping.

- If you going to make your application portable to other EJB 3 compliant ORM applications, you must use annotations to represent the mapping information, but still if you want greater flexibility, then you should go with XML-based mappings.

	- JDK 5.0 or higher
	- Hibernate 3.x annotations distribution package 
			- hibernate-annotations.jar
			- lib/hibernate-comons-annotations.jar and
			- lib/ejb3-persistence.jar


			
--------------------------------------			
http://www.baeldung.com/stored-procedures-with-hibernate-tutorial
https://github.com/eugenp/tutorials/tree/master/spring-hibernate4


--------------------  SP Native SQL -------------------
3.2. Call a Stored Procedure Using the CreateNativeSQL Method
Hibernate allows to express queries in native SQL format directly. Therefore, we can straightforwardly create a native SQL query, and use the CALL statement to call the getAllFoos() stored procedure:

	Query query = session.createSQLQuery("CALL GetAllFoos()").addEntity(Foo.class);
	List<Foo> allFoos = query.list();

--------------------  SP Annotations 1 -------------------
3.3 Call a Stored Procedure Using @NamedNativeQueries

Another way to call a stored procedure is to use the @NamedNativeQueries annotation.

@NamedNativeQueries is used to specify an array of native SQL named queries scoped to the persistence unit:

	@NamedNativeQueries({ 
		@NamedNativeQuery(
			name = "callGetAllFoos", 
			query = "CALL GetAllFoos()", 
			resultClass = Foo.class) 
	})
	@Entity
	public class Foo implements Serializable {
		// Model definition
	}

--------------------  SP Annotations 2 -------------------
3.4. Call a Stored Procedure Using @NamedStoredProcedureQuery	

If you are using JPA 2.1 and the Hibernate implementation of the EntityManagerFactory and EntityManager.

The @NamedStoredProcedureQuery annotation can be used to declare a stored procedure:

	@NamedStoredProcedureQuery(
		name="GetAllFoos",
		procedureName="GetAllFoos",
		resultClasses = { Foo.class }
	)
	@Entity
	public class Foo implements Serializable {
		// Model Definition 
	}
	
To call our named stored procedure query, we need to have instantiated an EntityManager, and then call the createNamedStoredProcedureQuery() method to create the procedure:

StoredProcedureQuery spQuery = 
  entityManager.createNamedStoredProcedureQuery("getAllFoos");
We can directly get the list of Foo entities by calling the execute() method on StoredProcedureQuery object.

--------------------  SP with Parameters -------------------
Almost all our stored procedures will require parameters. In this section, we are going to show how to call a stored procedure with parameters from Hibernate.

Let’s create a getFoosByName() stored procedure in MySQL.

This procedure returns a list of Foo objects where the name attribute matches the fooName parameter:

DELIMITER //
    CREATE PROCEDURE GetFoosByName(IN fooName VARCHAR(255))
        LANGUAGE SQL
        DETERMINISTIC
        SQL SECURITY DEFINER
        BEGIN
            SELECT * FROM foo WHERE name = fooName;
        END //
DELIMITER;

To call the GetFoosByName() procedure we will use named parameters:

Query query = session.createSQLQuery("CALL GetFoosByName(:fooName)")
  .addEntity(Foo.class)
  .setParameter("fooName","New Foo");
  
  Similarly, the named parameter :fooName can be used with the @NamedNativeQuery annotation:

@NamedNativeQuery(
  name = "callGetFoosByName", 
  query = "CALL GetFoosByName(:fooName)", 
  resultClass = Foo.class
)
The named query would be called as follows:

Query query = session.getNamedQuery("callGetFoosByName")
  .setParameter("fooName","New Foo");
  
  When using the @NamedStoredProcedureQuery annotation, we can specify parameters using the @StoredProcedureParameter annotation:

@NamedStoredProcedureQuery(
  name="GetFoosByName",
  procedureName="GetFoosByName",
  resultClasses = { Foo.class },
  parameters={
    @StoredProcedureParameter(name="fooName", type=String.class, mode=ParameterMode.IN)
  }
)
We can make use of the registerStoredProcedureParameter() method to call our stored procedure with the fooName parameter:

StoredProcedureQuery spQuery = entityManager.
  createNamedStoredProcedureQuery("GetFoosByName")
  .registerStoredProcedureParameter(
    "New Foo", 
    String.class , 
    ParameterMode.IN
  );

  
https://www.programering.com/a/MjMwQDMwATk.html
https://stackoverflow.com/questions/16157349/how-to-call-a-mysql-stored-procedure-with-arguments-from-command-line
https://stackoverflow.com/questions/16007881/how-to-execute-a-sql-stored-procedure-from-java-hibernate-using-session-factory
https://www.mkyong.com/hibernate/hibernate-named-query-examples/
https://www.tutorialspoint.com/hibernate/hibernate_query_language.htm
https://vladmihalcea.com/how-to-call-mysql-stored-procedures-and-functions-with-jpa-and-hibernate/
https://stackoverflow.com/questions/14351589/how-to-call-a-mysql-stored-procedure-from-hibernate
http://findnerd.com/list/view/Call-Stored-Procedure-In-Hibernate/2397/